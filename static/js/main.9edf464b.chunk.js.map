{"version":3,"sources":["components/ProfileCard/ProfileCard.js","components/Configurator/Configurator.js","components/UserSearch/UserSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","elevation","variant","ProfileCardMax","userData","config","gradient","href","link","className","target","style","background","backgroundImage","profile_image","color","textColor","display_name","toUpperCase","xmlns","xmlnsXlink","preserveAspectRatio","viewBox","id","d","x","fill","xlinkHref","y","src","width","alt","filter","value","reputation","displayType","thousandSeparator","Typography","display","gutterBottom","badge_counts","gold","silver","bronze","ProfileCardMini","ProfileCard","userId","useState","setUserData","userQueryId","useParams","openModal","setOpenModal","join","getUserData","apiEndpoint","fetch","then","res","json","result","hasOwnProperty","items","length","catch","err","console","log","useEffect","size","Snackbar","open","autoHideDuration","onClose","event","reason","severity","defaultProps","useStyles","makeStyles","theme","grid","margin","spacing","flexGrow","maxWidth","flexBasis","cutHex","h","charAt","substring","getBorW","hex","parseInt","hexToG","hexToB","Configurator","onChange","classes","React","gradients","setGradients","setConfig","gradientsJSON","renderCell","columnIndex","key","rowIndex","index","datum","cellStyle","colors","onClick","updateConfig","name","newConfig","Fragment","Grid","container","item","xs","Paper","Button","disableHeight","columnMinWidth","columnCount","adjustedWidth","getColumnWidth","registerChild","ref","cellRenderer","columnWidth","height","rowCount","Math","floor","rowHeight","outline","UserSearch","onUserChange","setOpen","options","setOptions","loading","getUsers","searchValue","finally","debouncedGetUsers","useCallback","debounce","Autocomplete","onOpen","getOptionSelected","option","JSON","stringify","e","v","user_id","getOptionLabel","renderInput","params","TextField","label","InputProps","endAdornment","CircularProgress","renderOption","selected","App","setUserId","settingsToggle","setSettingsToggle","openCodeDialog","setOpenCodeDialog","embedCode","setEmbedCode","window","location","closeDialog","rel","path","component","Fab","marginRight","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogActions","autoFocus","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iYASMA,EAAQ,SAACC,GACX,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,KAGlDG,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,SAArB,OACnB,mBAAGC,KAAMH,EAASI,KAAMC,UAAU,WAAWC,OAAO,QAApD,SACI,sBAAKD,UAAU,mBAAf,UACI,sBAAKA,UAAU,UAAUE,MAAO,CAAEC,WAAYN,GAA9C,UACI,qBACIG,UAAU,iBACVE,MAAO,CACHE,gBAAgB,OAAD,OAAST,EAASU,cAAlB,QAIvB,mBAAGL,UAAU,cAAcE,MAAO,CAAEI,MAAOV,EAAOW,WAAlD,gBACKZ,QADL,IACKA,OADL,EACKA,EAAUa,aAAaC,gBAE5B,sBACIC,MAAM,6BACNC,WAAW,+BACXX,UAAU,QACVY,oBAAoB,gBACpBC,QAAQ,cALZ,UAOI,+BACI,sBACIC,GAAG,cACHC,EAAE,+FAGV,oBAAGf,UAAU,WAAb,UACI,qBACIgB,EAAE,KACFC,KAAK,wBACLC,UAAU,iBAEd,qBACIF,EAAE,KACFG,EAAE,IACFF,KAAK,wBACLC,UAAU,iBAEd,qBACIF,EAAE,KACFG,EAAE,IACFF,KAAK,wBACLC,UAAU,iBAEd,qBACIF,EAAE,KACFG,EAAE,IACFF,KAAK,OACLC,UAAU,0BAK1B,sBAAKlB,UAAU,aAAf,UACI,oBAAGA,UAAU,aAAb,UACI,qBACIoB,IAAI,0EACJC,MAAM,MACNC,IAAI,uBAER,sBACItB,UAAU,oBACVE,MAAO,CACHE,gBAAiBP,EACjB0B,OACyB,YAArB3B,EAAOW,UACD,gCACA,QAPlB,SAUI,cAAC,IAAD,CACIiB,MAAO7B,EAAS8B,WAChBC,YAAa,OACbC,mBAAmB,MAG3B,cAACC,EAAA,EAAD,CAAYnC,QAAQ,UAAUoC,QAAQ,QAAQC,cAAY,EAA1D,2BAIJ,sBAAK9B,UAAU,SAAf,UACI,sBAAKA,UAAU,QAAf,UACI,qBAAKA,UAAU,8BAAf,SACI,+BAAOL,EAASoC,aAAaC,SAEjC,qBAAKhC,UAAU,gCACf,qBAAKA,UAAU,oCAEnB,sBAAKA,UAAU,QAAf,UACI,qBAAKA,UAAU,gCAAf,SACI,+BAAOL,EAASoC,aAAaE,WAEjC,qBAAKjC,UAAU,gCACf,qBAAKA,UAAU,oCAEnB,sBAAKA,UAAU,QAAf,UACI,qBAAKA,UAAU,gCAAf,SACI,+BAAOL,EAASoC,aAAaG,WAEjC,qBAAKlC,UAAU,gCACf,qBAAKA,UAAU,gDAQjCmC,EAAkB,SAAC,GAAD,IAAGxC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,SAArB,OACpB,mBAAGC,KAAMH,EAASI,KAAMC,UAAU,WAAWC,OAAO,QAApD,SACI,sBAAKD,UAAU,kBAAf,UACI,sBAAKA,UAAU,WAAWE,MAAO,CAAEC,WAAYN,GAA/C,UACI,qBACIG,UAAU,iBACVE,MAAO,CACHE,gBAAgB,OAAD,OAAST,EAASU,cAAlB,QAGvB,mBAAGL,UAAU,cAAcE,MAAO,CAAEI,MAAOV,EAAOW,WAAlD,gBACKZ,QADL,IACKA,OADL,EACKA,EAAUa,aAAaC,mBAGhC,sBAAKT,UAAU,YAAf,UACI,oBAAGA,UAAU,aAAb,UACI,qBACIoB,IAAI,0EACJC,MAAM,MACNC,IAAI,uBAER,sBACItB,UAAU,oBACVE,MAAO,CACHE,gBAAiBP,EACjB0B,OACyB,YAArB3B,EAAOW,UACD,gCACA,QAPlB,SAUI,cAAC,IAAD,CACIiB,MAAO7B,EAAS8B,WAChBC,YAAa,OACbC,mBAAmB,MAG3B,cAACC,EAAA,EAAD,CAAYnC,QAAQ,UAAUoC,QAAQ,QAAQC,cAAY,EAA1D,2BAIJ,sBAAK9B,UAAU,SAAf,UACI,sBAAKA,UAAU,QAAf,UACI,qBAAKA,UAAU,8BAAf,SACI,+BAAOL,EAASoC,aAAaC,SAEjC,qBAAKhC,UAAU,gCACf,qBAAKA,UAAU,oCAEnB,sBAAKA,UAAU,QAAf,UACI,qBAAKA,UAAU,gCAAf,SACI,+BAAOL,EAASoC,aAAaE,WAEjC,qBAAKjC,UAAU,gCACf,qBAAKA,UAAU,oCAEnB,sBAAKA,UAAU,QAAf,UACI,qBAAKA,UAAU,gCAAf,SACI,+BAAOL,EAASoC,aAAaG,WAEjC,qBAAKlC,UAAU,gCACf,qBAAKA,UAAU,gDAQjCoC,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,OAAQzC,EAAa,EAAbA,OAAa,EACR0C,mBAAS,MADD,mBACjC3C,EADiC,KACvB4C,EADuB,KAEhCC,EAAgBC,cAAhBD,YAFgC,EAGNF,oBAAS,GAHH,mBAGjCI,EAHiC,KAGtBC,EAHsB,KAIlC9C,EAAQ,iCAA6BD,EAAOC,SAAS+C,KAAK,MAAlD,KAERC,EAAc,SAACR,GACjB,IAAMS,EAAW,kDAA8CT,EAA9C,kDACjBU,MAAMD,GACDE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACCA,EAAOC,eAAe,SACtBb,EACIY,EAAOE,MAAMC,OAAS,EAAIH,EAAOE,MAAM,GAAK,MAGhDV,GAAa,MAGpBY,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,OAGpCG,qBAAU,WACFnB,GACAK,EAAYL,KAEjB,IAEHmB,qBAAU,WACFtB,GACAQ,EAAYR,KAEjB,CAACA,IAUJ,OAAO1C,EACH,qBAAKK,UAAU,cAAf,SACqB,UAAhBJ,EAAOgE,KACJ,cAAC,EAAD,CACIjE,SAAUA,EACVC,OAAQA,EACRC,SAAUA,IAGd,cAAC,EAAD,CACIF,SAAUA,EACVC,OAAQA,EACRC,SAAUA,MAKtB,eAAC,WAAD,WACI,cAACgE,EAAA,EAAD,CACIC,KAAMpB,EACNqB,iBAAkB,IAClBC,QA7BQ,SAACC,EAAOC,GACT,cAAXA,GAIJvB,GAAa,IAqBT,SAKI,cAAC,EAAD,CAAOwB,SAAS,QAAhB,+CAEJ,qBAAKnE,UAAU,UAAf,yBASZoC,EAAYgC,aAAe,GAEZhC,Q,wGCjQTiC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,EACVC,SAAS,OACTC,UAAU,YAOZC,EAAS,SAACC,GAAD,MAAwB,MAAhBA,EAAEC,OAAO,GAAaD,EAAEE,UAAU,EAAG,GAAKF,GAE3DG,EAAU,SAACC,GAQb,OAD4B,IAZVC,SAASN,EAQPK,GARiBF,UAAU,EAAG,GAAI,IAYX,IAXhC,SAACF,GAAD,OAAOK,SAASN,EAAOC,GAAGE,UAAU,EAAG,GAAI,IAQvCI,CAAOF,GAGmC,IAV9C,SAACJ,GAAD,OAAOK,SAASN,EAAOC,GAAGE,UAAU,EAAG,GAAI,IAQxCK,CAAOH,IAE2C,IAN9C,IAQP,UAEA,WAITI,EAAe,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACbC,EAAUpB,IADiB,EAECqB,IAAMpD,SAAS,IAFhB,mBAE1BqD,EAF0B,KAEfC,EAFe,OAGLF,IAAMpD,SAAS,CACvCsB,KAAM,QACN/D,SAAU,CAAC,UAAW,WACtBU,UAAW,YANkB,mBAG1BX,EAH0B,KAGlBiG,EAHkB,KAWjCH,IAAM/B,WAAU,WACZiC,EAAaE,KACd,IAEH,IAAMC,EAAa,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,SAAUhG,EAAY,EAAZA,MACxCiG,EAPU,EAOFD,EAAyBF,EACjCI,EAAQT,EAAUQ,GAClBE,EAAY,CACdjG,gBAAgB,0BAAD,OAA4BgG,EAAME,OAAO1D,KACpD,MADW,KAGftC,MAAO4E,EAAQkB,EAAME,OAAO,KAEhC,OACI,qBACIpG,MAAK,2BAAOmG,GAAcnG,GAE1BF,UAAU,WACVuG,QAAS,kBAAMC,EAAa,CAAC3G,SAAUuG,EAAME,OAAQ/F,UAAW8F,EAAU/F,SAJ9E,SAMKqF,EAAUQ,GAAOM,KAAKhG,eAJlBwF,IASXO,EAAe,SAACE,GAClBb,EAAU,2BAAIjG,GAAW8G,IACzBlB,EAAS,2BAAI5F,GAAW8G,KAG5B,OACI,cAAC,IAAMC,SAAP,UACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACnC,QAAS,EAAG1E,UAAWyF,EAAQjB,KAA/C,UACI,cAACoC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACI,eAACC,EAAA,EAAD,CAAOhH,UAAU,UAAjB,UACI,mBAAGA,UAAU,SAAb,uBACA,eAACiH,EAAA,EAAD,CACIjH,UAAU,iBACVP,QACoB,UAAhBG,EAAOgE,KAAmB,YAAc,WAE5CpC,MAAM,QACNlB,MAAM,UACNiG,QAAS,kBAAMC,EAAa,CAAC5C,KAAM,WAPvC,UASI,cAAC,IAAD,IATJ,UAWA,eAACqD,EAAA,EAAD,CACIjH,UAAU,iBACVP,QACoB,UAAhBG,EAAOgE,KAAmB,YAAc,WAE5CpC,MAAM,QACNlB,MAAM,UACNiG,QAAS,kBAAMC,EAAa,CAAC5C,KAAM,WAPvC,UASI,cAAC,IAAD,IATJ,gBAaR,cAACgD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACI,eAACC,EAAA,EAAD,CAAOhH,UAAU,UAAjB,UACI,mBAAGA,UAAU,SAAb,iCACA,cAAC,IAAD,CAAWkH,eAAa,EAAxB,SACK,gBAAG7F,EAAH,EAAGA,MAAH,OACG,cAAC,IAAD,CACI8F,eAAgB,GAChBC,YArEZ,EAsEY/F,MAAOA,EAHX,SAKK,gBACGgG,EADH,EACGA,cACAC,EAFH,EAEGA,eACAC,EAHH,EAGGA,cAHH,OAKG,cAAC,IAAD,CACIC,IAAKD,EACLE,aAAc1B,EACdqB,YAhFpB,EAiFoBM,YAAaJ,EACbK,OAAQ,IACRC,SAAUC,KAAKC,MACXnC,EAAUrC,OApFlC,GAsFoByE,UAAW,GACX1G,MAAOgG,EACPnH,MAAO,CAAC8H,QAAS,2BAe7DzC,EAAanB,aAAe,GAEbmB,Q,oJClJT0C,EAAa,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EACX5F,oBAAS,GADE,mBAC5BwB,EAD4B,KACtBqE,EADsB,OAEL7F,mBAAS,IAFJ,mBAE5B8F,EAF4B,KAEnBC,EAFmB,KAG/BC,EAAUxE,GAA2B,IAAnBsE,EAAQ9E,OAE9BK,qBAAU,kBAAM4E,EAAS,MAAK,IAE9B,IAqCMA,EAAW,SAACC,GACd,IAAM1F,EAAW,uGAAmG0F,GACpH/E,QAAQC,IAAIZ,GACZC,MAAMD,GACDE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACDA,EAAOC,eAAe,SACxBiF,EAAWlF,EAAOE,MAAMC,OAAS,EAAIH,EAAOE,MAAQ,IAEpDI,QAAQC,IAAIP,MAGfsF,SAAQ,WACLH,GAAU,MAGhBI,EAAoBC,sBAAYC,mBAASL,EAAU,KAAO,IAEhE,OACI,qBAAKvI,UAAU,aAAf,SACI,cAAC6I,EAAA,EAAD,CACI/H,GAAG,cACHgD,KAAMA,EACN5D,MAAO,CAAEmB,MAAO,MAAUoD,OAAQ,UAClCqE,OAAQ,kBAAMX,GAAQ,IACtBnE,QAAS,kBAAMmE,GAAQ,IACvBY,kBAAmB,SAACC,EAAQxH,GAAT,OACfyH,KAAKC,UAAUF,KAAYC,KAAKC,UAAU1H,IAE9CgE,SAAU,SAAC2D,EAAGC,GAEVlB,EADEkB,EACWA,EAAEC,QAEF,YAGjBC,eAAgB,SAACN,GAAD,OAAaA,EAASA,EAAOxI,aAAe,IAC5D4H,QAASA,EACTE,QAASA,EACTiB,YA5EgB,SAACC,GAAD,OACxB,cAACC,EAAA,EAAD,2BACQD,GADR,IAEIhE,SAAU,SAAC2D,GACPb,GAAU,EACVI,EAAkBS,EAAElJ,OAAOuB,QAE/BkI,MAAM,eACNjK,QAAQ,WACRkK,WAAU,2BACHH,EAAOG,YADJ,IAENC,aACI,eAAC,WAAD,WACKtB,EACG,cAACuB,EAAA,EAAD,CACIvJ,MAAM,UACNsD,KAAM,KAEV,KACH4F,EAAOG,WAAWC,sBA0D3BE,aAnDiB,SAACd,EAAD,KAAWe,SAAX,OACzB,cAAC,WAAD,UACI,sBAAK/J,UAAU,eAAf,UACI,+BAAOgJ,EAAOxI,eACd,eAACoB,EAAA,EAAD,CAAYnC,QAAQ,UAAUoC,QAAQ,QAAQC,cAAY,EAA1D,iBACSkH,EAAOK,sBAsDhCpB,EAAW7D,aAAe,GAEX6D,QC6CA+B,MAnIf,WAAgB,IAAD,EAEiB1H,mBAAS,WAF1B,mBAEJD,EAFI,KAEI4H,EAFJ,OAGiB3H,mBAAS,CACjCsB,KAAM,QACN/D,SAAU,CAAC,UAAW,WACtBU,UAAW,YANJ,mBAGJX,EAHI,KAGIiG,EAHJ,OAQiCvD,oBAAS,GAR1C,mBAQJ4H,EARI,KAQYC,EARZ,OASiC7H,oBAAS,GAT1C,mBASJ8H,EATI,KASYC,EATZ,OAUuB/H,mBAAS,IAVhC,mBAUJgI,EAVI,KAUOC,EAVP,KAYX5G,qBAAU,WACN4G,EAAa,gBAAD,OACQC,OAAOC,SADf,gBAC+BpI,EAD/B,qFAGb,CAACA,IAEJ,IAOMqI,EAAc,WAChBL,GAAkB,IAGtB,OACI,eAAC,IAAD,WACI,sBAAMM,IAAI,aAAa7K,KAAK,8BAC5B,sBACIA,KAAK,iEACL6K,IAAI,eAER,sBACI7K,KAAK,yFACL6K,IAAI,eAER,sBACI7K,KAAK,+EACL6K,IAAI,eAER,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,qBAAqBC,UAAW,kBAAO,cAAC,EAAD,CAAajL,OAAQA,OAExE,cAAC,IAAD,CAAOgL,KAAK,IAAZ,SACI,sBAAK5K,UAAU,OAAf,UACI,sBACIA,UAAU,WACVE,MAAO,CACHE,gBAAiB,oBACjBE,MAAO,QAJf,UAOI,qBAAKN,UAAU,OAAf,SACI,qBACIoB,IAAI,0EACJuG,OAAO,KACPrG,IAAI,yBAGZ,mBAAGtB,UAAU,QAAb,0BACA,cAAC,EAAD,CAAYkI,aA9CT,SAAC7F,GACxBkI,EAAa,gBAAD,OACQC,OAAOC,SADf,gBAC+BpI,EAD/B,mFAGZ4H,EAAU5H,MA2CU,cAAC,EAAD,CAAaA,OAAQA,EAAQzC,OAAQA,IACrC,sBAAKI,UAAU,SAAf,UACI,eAAC8K,EAAA,EAAD,CACIrL,QAAQ,WACRa,MAAM,UACNJ,MAAO,CAAE6K,YAAa,QACtBxE,QAAS,kBAAM8D,GAAmBD,IAJtC,UAMI,cAAC,IAAD,CACIlK,MAAO,CAAE6K,YAAa,UAP9B,WAWA,eAACD,EAAA,EAAD,CACIrL,QACIyK,EAAiB,QAAU,WAE/B5J,MAAM,YACNiG,QAAS,kBACL4D,GAAmBD,IAN3B,UASKA,EACG,cAAC,IAAD,IAEA,cAAC,IAAD,CACIhK,MAAO,CAAE6K,YAAa,UAG7Bb,EAAiB,GAAK,kBAG/B,eAACc,EAAA,EAAD,CACIlH,KAAMsG,EACNpG,QAAS0G,EACTO,kBAAgB,qBAChBC,mBAAiB,2BAJrB,UAMI,cAACC,EAAA,EAAD,CAAarK,GAAG,qBAAhB,wBAGA,cAACsK,EAAA,EAAD,UACI,8BAAMd,MAEV,cAACe,EAAA,EAAD,UACA,cAACpE,EAAA,EAAD,CAAQV,QAASmE,EAAapK,MAAM,UAAUgL,WAAS,EAAvD,0BAMR,qBACItL,UAAU,YACVE,MAAO,CACH2B,QAASqI,EAAiB,QAAU,QAH5C,SAMI,cAAC,EAAD,CAAc1E,SAAUK,kBC/HrC0F,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzI,MAAK,YAAkD,IAA/C0I,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9edf464b.chunk.js","sourcesContent":["import { useState, useEffect, Fragment } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport NumberFormat from \"react-number-format\";\nimport PropTypes from \"prop-types\";\nimport \"./ProfileCard.css\";\nimport { useParams } from \"react-router-dom\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nconst Alert = (props) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nconst ProfileCardMax = ({ userData, config, gradient }) => (\n    <a href={userData.link} className=\"CardLink\" target=\"blank\">\n        <div className=\"ProfileCardLarge\">\n            <div className=\"CardTop\" style={{ background: gradient }}>\n                <div\n                    className=\"DisplayPicture\"\n                    style={{\n                        backgroundImage: `url(${userData.profile_image})`,\n                    }}\n                ></div>\n\n                <p className=\"ProfileName\" style={{ color: config.textColor }}>\n                    {userData?.display_name.toUpperCase()}\n                </p>\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                    className=\"waves\"\n                    preserveAspectRatio=\"xMaxYMin meet\"\n                    viewBox=\"0 24 150 28\"\n                >\n                    <defs>\n                        <path\n                            id=\"gentle-wave\"\n                            d=\"M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 22 h -352 z\"\n                        ></path>\n                    </defs>\n                    <g className=\"parallax\">\n                        <use\n                            x=\"48\"\n                            fill=\"rgba(255,255,255,0.6)\"\n                            xlinkHref=\"#gentle-wave\"\n                        ></use>\n                        <use\n                            x=\"48\"\n                            y=\"2\"\n                            fill=\"rgba(255,255,255,0.4)\"\n                            xlinkHref=\"#gentle-wave\"\n                        ></use>\n                        <use\n                            x=\"48\"\n                            y=\"4\"\n                            fill=\"rgba(255,255,255,0.2)\"\n                            xlinkHref=\"#gentle-wave\"\n                        ></use>\n                        <use\n                            x=\"48\"\n                            y=\"6\"\n                            fill=\"#fff\"\n                            xlinkHref=\"#gentle-wave\"\n                        ></use>\n                    </g>\n                </svg>\n            </div>\n            <div className=\"CardBottom\">\n                <p className=\"Reputation\">\n                    <img\n                        src=\"https://stackoverflow.design/assets/img/logos/so/logo-stackoverflow.png\"\n                        width=\"130\"\n                        alt=\"StackOverflow Logo\"\n                    ></img>\n                    <span\n                        className=\"ReputationContent\"\n                        style={{\n                            backgroundImage: gradient,\n                            filter:\n                                config.textColor === \"#000000\"\n                                    ? \"drop-shadow(1px 1px 1px #333)\"\n                                    : \"none\",\n                        }}\n                    >\n                        <NumberFormat\n                            value={userData.reputation}\n                            displayType={\"text\"}\n                            thousandSeparator={true}\n                        />\n                    </span>\n                    <Typography variant=\"caption\" display=\"block\" gutterBottom>\n                        REPUTATION\n                    </Typography>\n                </p>\n                <div className=\"Medals\">\n                    <div className=\"Medal\">\n                        <div className=\"MedalCircle MedalCircleGold\">\n                            <span>{userData.badge_counts.gold}</span>\n                        </div>\n                        <div className=\"MedalRibbon MedalRibbonLeft\"></div>\n                        <div className=\"MedalRibbon MedalRibbonRight\"></div>\n                    </div>\n                    <div className=\"Medal\">\n                        <div className=\"MedalCircle MedalCircleSilver\">\n                            <span>{userData.badge_counts.silver}</span>\n                        </div>\n                        <div className=\"MedalRibbon MedalRibbonLeft\"></div>\n                        <div className=\"MedalRibbon MedalRibbonRight\"></div>\n                    </div>\n                    <div className=\"Medal\">\n                        <div className=\"MedalCircle MedalCircleBronze\">\n                            <span>{userData.badge_counts.bronze}</span>\n                        </div>\n                        <div className=\"MedalRibbon MedalRibbonLeft\"></div>\n                        <div className=\"MedalRibbon MedalRibbonRight\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </a>\n);\n\nconst ProfileCardMini = ({ userData, config, gradient }) => (\n    <a href={userData.link} className=\"CardLink\" target=\"blank\">\n        <div className=\"ProfileCardMini\">\n            <div className=\"CardLeft\" style={{ background: gradient }}>\n                <div\n                    className=\"DisplayPicture\"\n                    style={{\n                        backgroundImage: `url(${userData.profile_image})`,\n                    }}\n                ></div>\n                <p className=\"ProfileName\" style={{ color: config.textColor }}>\n                    {userData?.display_name.toUpperCase()}\n                </p>\n            </div>\n            <div className=\"CardRight\">\n                <p className=\"Reputation\">\n                    <img\n                        src=\"https://stackoverflow.design/assets/img/logos/so/logo-stackoverflow.png\"\n                        width=\"130\"\n                        alt=\"StackOverflow Logo\"\n                    ></img>\n                    <span\n                        className=\"ReputationContent\"\n                        style={{\n                            backgroundImage: gradient,\n                            filter:\n                                config.textColor === \"#000000\"\n                                    ? \"drop-shadow(1px 1px 1px #333)\"\n                                    : \"none\",\n                        }}\n                    >\n                        <NumberFormat\n                            value={userData.reputation}\n                            displayType={\"text\"}\n                            thousandSeparator={true}\n                        />\n                    </span>\n                    <Typography variant=\"caption\" display=\"block\" gutterBottom>\n                        REPUTATION\n                    </Typography>\n                </p>\n                <div className=\"Medals\">\n                    <div className=\"Medal\">\n                        <div className=\"MedalCircle MedalCircleGold\">\n                            <span>{userData.badge_counts.gold}</span>\n                        </div>\n                        <div className=\"MedalRibbon MedalRibbonLeft\"></div>\n                        <div className=\"MedalRibbon MedalRibbonRight\"></div>\n                    </div>\n                    <div className=\"Medal\">\n                        <div className=\"MedalCircle MedalCircleSilver\">\n                            <span>{userData.badge_counts.silver}</span>\n                        </div>\n                        <div className=\"MedalRibbon MedalRibbonLeft\"></div>\n                        <div className=\"MedalRibbon MedalRibbonRight\"></div>\n                    </div>\n                    <div className=\"Medal\">\n                        <div className=\"MedalCircle MedalCircleBronze\">\n                            <span>{userData.badge_counts.bronze}</span>\n                        </div>\n                        <div className=\"MedalRibbon MedalRibbonLeft\"></div>\n                        <div className=\"MedalRibbon MedalRibbonRight\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </a>\n);\n\nconst ProfileCard = ({ userId, config }) => {\n    const [userData, setUserData] = useState(null);\n    const { userQueryId } = useParams();\n    const [openModal, setOpenModal] = useState(false);\n    const gradient = `linear-gradient(45deg, ${config.gradient.join(\", \")})`;\n\n    const getUserData = (userId) => {\n        const apiEndpoint = `https://api.stackexchange.com/2.2/users/${userId}?order=desc&sort=reputation&site=stackoverflow`;\n        fetch(apiEndpoint)\n            .then((res) => res.json())\n            .then((result) => {\n                if (result.hasOwnProperty('items')) {\n                    setUserData(\n                        result.items.length > 0 ? result.items[0] : null\n                    );\n                } else {\n                    setOpenModal(true);\n                }\n            })\n            .catch((err) => console.log(err));\n    };\n\n    useEffect(() => {\n        if (userQueryId) {\n            getUserData(userQueryId);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (userId) {\n            getUserData(userId);\n        }\n    }, [userId]);\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpenModal(false);\n    };\n\n    return userData ? (\n        <div className=\"UserProfile\">\n            {config.size === \"large\" ? (\n                <ProfileCardMax\n                    userData={userData}\n                    config={config}\n                    gradient={gradient}\n                ></ProfileCardMax>\n            ) : (\n                <ProfileCardMini\n                    userData={userData}\n                    config={config}\n                    gradient={gradient}\n                ></ProfileCardMini>\n            )}\n        </div>\n    ) : (\n        <Fragment>\n            <Snackbar\n                open={openModal}\n                autoHideDuration={6000}\n                onClose={handleClose}\n            >\n                <Alert severity=\"error\">Too many requests at the moment</Alert>\n            </Snackbar>\n            <div className=\"Loading\">Loading</div>\n        </Fragment>\n    );\n};\n\nProfileCard.propTypes = {\n    name: PropTypes.string,\n};\n\nProfileCard.defaultProps = {};\n\nexport default ProfileCard;\n","import React from \"react\";\nimport \"./Configurator.css\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FullscreenIcon from \"@material-ui/icons/Fullscreen\";\nimport FullscreenExitIcon from \"@material-ui/icons/FullscreenExit\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AutoSizer, ColumnSizer, Grid as VirtualGrid } from \"react-virtualized\";\nimport \"react-virtualized/styles.css\";\nimport gradientsJSON from \"../../data/gradients.json\";\n\nconst useStyles = makeStyles((theme) => ({\n    grid: {\n        margin: theme.spacing(0),\n        flexGrow: 0,\n        maxWidth: `100%`,\n        flexBasis: `100%`,\n    },\n}));\n\nconst hexToR = (h) => parseInt(cutHex(h).substring(0, 2), 16);\nconst hexToG = (h) => parseInt(cutHex(h).substring(2, 4), 16);\nconst hexToB = (h) => parseInt(cutHex(h).substring(4, 6), 16);\nconst cutHex = (h) => (h.charAt(0) === \"#\" ? h.substring(1, 7) : h);\n\nconst getBorW = (hex) => {\n    const threshold = 130; /* about half of 256. Lower threshold equals more dark text on dark background  */\n\n    const hRed = hexToR(hex);\n    const hGreen = hexToG(hex);\n    const hBlue = hexToB(hex);\n\n    const cBrightness = (hRed * 299 + hGreen * 587 + hBlue * 114) / 1000;\n    if (cBrightness > threshold) {\n        return \"#000000\";\n    } else {\n        return \"#ffffff\";\n    }\n};\n\nconst Configurator = ({onChange}) => {\n    const classes = useStyles();\n    const [gradients, setGradients] = React.useState([]);\n    const [config, setConfig] = React.useState({\n        size: 'large',\n        gradient: ['#20bf55', '#01baef'],\n        textColor: '#FFFFFF'\n    });\n\n    const columnCount = 3;\n\n    React.useEffect(() => {\n        setGradients(gradientsJSON);\n    }, []);\n\n    const renderCell = ({ columnIndex, key, rowIndex, style }) => {\n        const index = rowIndex * columnCount + columnIndex;\n        const datum = gradients[index];\n        const cellStyle = {\n            backgroundImage: `linear-gradient(45deg, ${datum.colors.join(\n                \", \"\n            )})`,\n            color: getBorW(datum.colors[0]),\n        };\n        return (\n            <div\n                style={{ ...cellStyle, ...style }}\n                key={key}\n                className=\"Gradient\"\n                onClick={() => updateConfig({gradient: datum.colors, textColor: cellStyle.color})}\n            >\n                {gradients[index].name.toUpperCase()}\n            </div>\n        );\n    };\n\n    const updateConfig = (newConfig) => {\n        setConfig({...config, ...newConfig});\n        onChange({...config, ...newConfig});\n    };\n\n    return (\n        <React.Fragment>\n            <Grid container spacing={3} className={classes.grid}>\n                <Grid item xs={12}>\n                    <Paper className=\"Section\">\n                        <p className=\"Header\">Card Size</p>\n                        <Button\n                            className=\"ButtonGradient\"\n                            variant={\n                                config.size === \"large\" ? \"contained\" : \"outlined\"\n                            }\n                            value=\"large\"\n                            color=\"primary\"\n                            onClick={() => updateConfig({size: \"large\"})}\n                        >\n                            <FullscreenIcon /> Max\n                        </Button>\n                        <Button\n                            className=\"ButtonGradient\"\n                            variant={\n                                config.size === \"small\" ? \"contained\" : \"outlined\"\n                            }\n                            value=\"small\"\n                            color=\"primary\"\n                            onClick={() => updateConfig({size: \"small\"})}\n                        >\n                            <FullscreenExitIcon /> Mini\n                        </Button>\n                    </Paper>\n                </Grid>\n                <Grid item xs={12}>\n                    <Paper className=\"Section\">\n                        <p className=\"Header\">Background Gradient</p>\n                        <AutoSizer disableHeight>\n                            {({ width }) => (\n                                <ColumnSizer\n                                    columnMinWidth={50}\n                                    columnCount={columnCount}\n                                    width={width}\n                                >\n                                    {({\n                                        adjustedWidth,\n                                        getColumnWidth,\n                                        registerChild,\n                                    }) => (\n                                        <VirtualGrid\n                                            ref={registerChild}\n                                            cellRenderer={renderCell}\n                                            columnCount={columnCount}\n                                            columnWidth={getColumnWidth}\n                                            height={300}\n                                            rowCount={Math.floor(\n                                                gradients.length / columnCount\n                                            )}\n                                            rowHeight={50}\n                                            width={adjustedWidth}\n                                            style={{outline: 'none'}}\n                                        />\n                                    )}\n                                </ColumnSizer>\n                            )}\n                        </AutoSizer>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n};\n\nConfigurator.propTypes = {};\n\nConfigurator.defaultProps = {};\n\nexport default Configurator;\n","import React from \"react\";\nimport \"./UserSearch.css\";\nimport { debounce } from \"lodash\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useEffect, useState, useCallback, Fragment } from \"react\";\n\nconst UserSearch = ({onUserChange}) => {\n    const [open, setOpen] = useState(false);\n    const [options, setOptions] = useState([]);\n    let loading = open && options.length === 0;\n\n    useEffect(() => getUsers(\"\"), []);\n\n    const searchInputRenderer = (params) => (\n        <TextField\n            {...params}\n            onChange={(e) => {\n                loading = true;\n                debouncedGetUsers(e.target.value);\n            }}\n            label=\"Search users\"\n            variant=\"outlined\"\n            InputProps={{\n                ...params.InputProps,\n                endAdornment: (\n                    <Fragment>\n                        {loading ? (\n                            <CircularProgress\n                                color=\"inherit\"\n                                size={20}\n                            ></CircularProgress>\n                        ) : null}\n                        {params.InputProps.endAdornment}\n                    </Fragment>\n                ),\n            }}\n        ></TextField>\n    );\n\n    const searchOptionRenderer = (option, { selected }) => (\n        <Fragment>\n            <div className=\"UserListItem\">\n                <span>{option.display_name}</span>\n                <Typography variant=\"caption\" display=\"block\" gutterBottom>\n                    ID: {option.user_id}\n                </Typography>\n            </div>\n        </Fragment>\n    );\n\n    const getUsers = (searchValue) => {\n        const apiEndpoint = `https://api.stackexchange.com/2.2/users?order=desc&sort=reputation&site=stackoverflow&inname=${searchValue}`;\n        console.log(apiEndpoint);\n        fetch(apiEndpoint)\n            .then((res) => res.json())\n            .then((result) => {\n              if (result.hasOwnProperty('items')) {\n                setOptions(result.items.length > 0 ? result.items : []);\n              } else {\n                console.log(result);\n              }\n            })\n            .finally(() => {\n                loading = false;\n            });\n    };\n    const debouncedGetUsers = useCallback(debounce(getUsers, 1000), []);\n\n    return (\n        <div className=\"UserSearch\">\n            <Autocomplete\n                id=\"user-search\"\n                open={open}\n                style={{ width: 75 + \"%\", margin: \"0 auto\" }}\n                onOpen={() => setOpen(true)}\n                onClose={() => setOpen(false)}\n                getOptionSelected={(option, value) =>\n                    JSON.stringify(option) === JSON.stringify(value)\n                }\n                onChange={(e, v) => {\n                  if (v) {\n                    onUserChange(v.user_id);\n                  } else {\n                    onUserChange(\"5120049\");\n                  }\n                }}\n                getOptionLabel={(option) => (option ? option.display_name : \"\")}\n                options={options}\n                loading={loading}\n                renderInput={searchInputRenderer}\n                renderOption={searchOptionRenderer}\n            ></Autocomplete>\n        </div>\n    );\n};\n\nUserSearch.propTypes = {};\n\nUserSearch.defaultProps = {};\n\nexport default UserSearch;\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport ProfileCard from \"./components/ProfileCard/ProfileCard\";\nimport Configurator from \"./components/Configurator/Configurator\";\nimport Fab from \"@material-ui/core/Fab\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport StyleIcon from \"@material-ui/icons/Style\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport UserSearch from './components/UserSearch/UserSearch';\n\nfunction App() {\n  \n    const [userId, setUserId] = useState(\"5120049\");\n    const [config, setConfig] = useState({\n        size: \"large\",\n        gradient: [\"#20bf55\", \"#01baef\"],\n        textColor: \"#FFFFFF\",\n    });\n    const [settingsToggle, setSettingsToggle] = useState(false);\n    const [openCodeDialog, setOpenCodeDialog] = useState(false);\n    const [embedCode, setEmbedCode] = useState(\"\");\n\n    useEffect(() => {\n        setEmbedCode(\n            `<iframe src=\"${window.location}user/${userId}\" width=\"100%\" height=\"100%\" seamless frameborder=\"0\" scrolling=\"no\"></iframe>`\n        );\n    }, [userId]);\n\n    const userChangedHandler = (userId) => {\n        setEmbedCode(\n            `<iframe src=\"${window.location}user/${userId}\" width=\"100%\" height=\"100%\" seamless frameborder=\"0\" scrolling=\"no\"></iframe>`\n        );\n        setUserId(userId);\n    };\n\n    const closeDialog = () => {\n        setOpenCodeDialog(false);\n    };\n  \n    return (\n        <Router>\n            <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\"></link>\n            <link\n                href=\"https://fonts.googleapis.com/css2?family=Pacifico&display=swap\"\n                rel=\"stylesheet\"\n            ></link>\n            <link\n                href=\"https://fonts.googleapis.com/css2?family=Saira+Condensed:wght@200;400;600&display=swap\"\n                rel=\"stylesheet\"\n            ></link>\n            <link\n                href=\"https://fonts.googleapis.com/css2?family=Alegreya+Sans:wght@800&display=swap\"\n                rel=\"stylesheet\"\n            ></link>\n            <Switch>\n                <Route path=\"/user/:userQueryId\" component={() => (<ProfileCard config={config}></ProfileCard>)}>\n                </Route>\n                <Route path=\"/\">\n                    <div className=\"Main\">\n                        <div\n                            className=\"LeftMain\"\n                            style={{\n                                backgroundImage: \"url(/lightbg.png)\",\n                                color: \"#000\",\n                            }}\n                        >\n                            <div className=\"Logo\">\n                                <img\n                                    src=\"https://stackoverflow.design/assets/img/logos/so/logo-stackoverflow.png\"\n                                    height=\"40\"\n                                    alt=\"StackOverflow Logo\"\n                                ></img>\n                            </div>\n                            <p className=\"Title\">Profile Card</p>\n                            <UserSearch onUserChange={userChangedHandler}></UserSearch>\n                            <ProfileCard userId={userId} config={config}></ProfileCard>\n                            <div className=\"Action\">\n                                <Fab\n                                    variant=\"extended\"\n                                    color=\"primary\"\n                                    style={{ marginRight: 20 + \"px\" }}\n                                    onClick={() => setOpenCodeDialog(!openCodeDialog)}\n                                >\n                                    <CodeIcon\n                                        style={{ marginRight: 10 + \"px\" }}\n                                    />\n                                    Embed\n                                </Fab>\n                                <Fab\n                                    variant={\n                                        settingsToggle ? \"round\" : \"extended\"\n                                    }\n                                    color=\"secondary\"\n                                    onClick={() =>\n                                        setSettingsToggle(!settingsToggle)\n                                    }\n                                >\n                                    {settingsToggle ? (\n                                        <CloseIcon />\n                                    ) : (\n                                        <StyleIcon\n                                            style={{ marginRight: 10 + \"px\" }}\n                                        />\n                                    )}\n                                    {settingsToggle ? \"\" : \"Customize\"}\n                                </Fab>\n                            </div>\n                            <Dialog\n                                open={openCodeDialog}\n                                onClose={closeDialog}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\"\n                            >\n                                <DialogTitle id=\"alert-dialog-title\">\n                                    Embed code\n                                </DialogTitle>\n                                <DialogContent>\n                                    <pre>{embedCode}</pre>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={closeDialog} color=\"primary\" autoFocus>\n                                    Done\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n                        </div>\n                        <div\n                            className=\"RightMain\"\n                            style={{\n                                display: settingsToggle ? \"block\" : \"none\",\n                            }}\n                        >\n                            <Configurator onChange={setConfig}></Configurator>\n                        </div>\n                    </div>\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}